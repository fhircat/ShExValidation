PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 


#imported_begin 
IMPORT <code.shex>
#imported_end
#imported_begin 
IMPORT <string.shex>
#imported_end
#imported_begin 
IMPORT <decimal.shex>
#imported_end
#imported_begin 
IMPORT <DataType.shex>
#imported_end
#imported_begin 
IMPORT <Quantity.shex>
#imported_end
#imported_begin 
IMPORT <canonical.shex>
#imported_end
#imported_begin 
IMPORT <positiveInt.shex>
#imported_end
# A series of measurements taken by a device
<SampledData> EXTENDS @<DataType> CLOSED {   

    a [fhir:SampledData]?;

    fhir:origin @<Quantity>;                # Zero value and units
    fhir:interval @<decimal>?;              # Number of intervalUnits between 
                                            # samples 
    fhir:intervalUnit @<code> AND
    	{fhir:v @fhirvs:ucum-units};  # The measurement unit of the 
                                            # interval between samples 
    fhir:factor @<decimal>?;                # Multiply data by this before 
                                            # adding to origin 
    fhir:lowerLimit @<decimal>?;            # Lower limit of detection
    fhir:upperLimit @<decimal>?;            # Upper limit of detection
    fhir:dimensions @<positiveInt>;         # Number of sample points at each 
                                            # time point 
    fhir:codeMap @<canonical>?;             # Defines the codes used in the data
    fhir:offsets @<string>?;                # Offsets, typically in time, at 
                                            # which data values were taken 
    fhir:data @<string>?;                   # Decimal values with spaces, or "E" 
                                            # | "U" | "L", or another code 
} AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Xor
# # Constraint UniqueKey:sdd-1
# Human readable:A SampledData SAHLL have either an interval and offsets but not both
#
# Constraint: interval.exists().not() xor offsets.exists().not()
# ShEx:
#
# NOT { fhir:interval . }  Xor   NOT { fhir:offsets . }
{}

)
 

#---------------------- Value Sets ------------------------


