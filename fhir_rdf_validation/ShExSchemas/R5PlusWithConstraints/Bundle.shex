PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 


#imported_begin 
IMPORT <uri.shex>
#imported_end
#imported_begin 
IMPORT <aux.shex>
#imported_end
#imported_begin 
IMPORT <code.shex>
#imported_end
#imported_begin 
IMPORT <string.shex>
#imported_end
#imported_begin 
IMPORT <instant.shex>
#imported_end
#imported_begin 
IMPORT <decimal.shex>
#imported_end
#imported_begin 
IMPORT <Resource.shex>
#imported_end
#imported_begin 
IMPORT <Signature.shex>
#imported_end
#imported_begin 
IMPORT <Identifier.shex>
#imported_end
#imported_begin 
IMPORT <unsignedInt.shex>
#imported_end
#imported_begin 
IMPORT <BackboneElement.shex>
#imported_end

start=@<Bundle> AND {fhir:nodeRole [fhir:treeRoot]}

# Contains a collection of resources
<Bundle> EXTENDS @<Resource> CLOSED {   

    a [fhir:Bundle]?;
    fhir:nodeRole [fhir:treeRoot]?;

    fhir:identifier @<Identifier>?;         # Persistent identifier for the 
                                            # bundle 
    fhir:type @<code> AND
    	{fhir:v @fhirvs:bundle-type};  # document | message | transaction | 
                                            # transaction-response | batch | 
                                            # batch-response | history | 
                                            # searchset | collection | 
                                            # subscription-notification 
    fhir:timestamp @<instant>?;             # When the bundle was assembled
    fhir:total @<unsignedInt>?;             # If search, the total number of 
                                            # matches 
    fhir:link @<OneOrMore_Bundle.link>?;    # Links related to this Bundle
    fhir:entry @<OneOrMore_Bundle.entry>?;  # Entry in the bundle - will have a 
                                            # resource or information 
    fhir:signature @<Signature>?;           # Digital Signature
    fhir:issues @<Resource>?;               # Issues with the Bundle
} AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: isDistinct
# Unmapped construct found: where
# Unmapped construct found: select
# Unmapped construct found: Concatenate
# Unmapped construct found: iif
# # Constraint UniqueKey:bdl-7
# Human readable:FullUrl must be unique in a bundle, or else entries with the same fullUrl must have different meta.versionId (except in history bundles)
#
# Constraint: (type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&iif(resource.meta.versionId.exists(), resource.meta.versionId, '')).isDistinct()
# ShEx:
#
#({ fhir:type { fhir:v ['history'] }  }) OR    isDistinct  ( fhir:entry. where  (fullUrl .). select  (fullUrl  Concatenate    iif  (resource.meta.versionId ., resource.meta.versionId, '')) )
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-9
# Human readable:A document must have an identifier with a system and a value
#
# Constraint: type = 'document' implies (identifier.system.exists() and identifier.value.exists())
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  })  Implies  ({fhir:identifier.system . AND {fhir:identifier.value .}})
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-17
# Human readable:Use and meaning of issues for documents has not been validated because the content will not be rendered in the document.
#
# Constraint: type = 'document' implies issues.empty()
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  })  Implies   NOT { fhir:issues {fhir:v .} } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-16
# Human readable:Issue.severity for all issues within the OperationOutcome must be either 'information' or 'warning'.
#
# Constraint: issues.exists() implies (issues.issue.severity = 'information' or issues.issue.severity = 'warning')
# ShEx:
#
#{fhir:issues .  Implies  (({fhir:issues.issue.severity { fhir:v ['information'] } }) OR ({fhir:issues.issue.severity { fhir:v ['warning'] } }))}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: where
# # Constraint UniqueKey:bdl-18
# Human readable:Self link is required for searchsets.
#
# Constraint: type = 'searchset' implies link.where(relation = 'self' and url.exists()).exists()
# ShEx:
#
#({ fhir:type { fhir:v ['searchset'] }  })  Implies  {fhir:link.  where  (relation { fhir:v ['self'] }  AND url .) .}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-13
# Human readable:A subscription-notification must have a SubscriptionStatus as the first resource
#
# Constraint: type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)
# ShEx:
#
#({ fhir:type { fhir:v ['subscription-notification'] }  })  Implies     first  ( fhir:entry ).resource { a [SubscriptionStatus] } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-12
# Human readable:A message must have a MessageHeader as the first resource
#
# Constraint: type = 'message' implies entry.first().resource.is(MessageHeader)
# ShEx:
#
#({ fhir:type { fhir:v ['message'] }  })  Implies     first  ( fhir:entry ).resource { a [MessageHeader] } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-15
# Human readable:Bundle resources where type is not transaction, transaction-response, batch, or batch-response or when the request is a POST SHALL have Bundle.entry.fullUrl populated
#
# Constraint: type='transaction' or type='transaction-response' or type='batch' or type='batch-response' or entry.all(fullUrl.exists() or request.method='POST')
# ShEx:
#
#({ fhir:type { fhir:v ['transaction'] }  }) OR ({ fhir:type { fhir:v ['transaction-response'] }  }) OR ({ fhir:type { fhir:v ['batch'] }  }) OR ({ fhir:type { fhir:v ['batch-response'] }  }) OR {fhir:entry.  all  (fullUrl . OR request.method { fhir:v ['POST'] } )}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-14
# Human readable:entry.request.method PATCH not allowed for history
#
# Constraint: type = 'history' implies entry.request.method != 'PATCH'
# ShEx:
#
#({ fhir:type { fhir:v ['history'] }  })  Implies  ({fhir:entry.request.method {fhir:v  [. -'PATCH']} })
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-11
# Human readable:A document must have a Composition as the first resource
#
# Constraint: type = 'document' implies entry.first().resource.is(Composition)
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  })  Implies     first  ( fhir:entry ).resource { a [Composition] } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-10
# Human readable:A document must have a date
#
# Constraint: type = 'document' implies (timestamp.hasValue())
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  })  Implies  ({fhir:timestamp .})
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-3d
# Human readable:For collections of type transaction-response or batch-response, all entries must contain response elements
#
# Constraint: type in ('transaction-response' | 'batch-response') implies entry.all(response.exists())
# ShEx:
#
#{ fhir:type { fhir:v ['transaction-response' 'batch-response'  Implies  {fhir:entry.  all  (response .)}] }  }
{}

) AND (

# Constraint UniqueKey:bdl-1
# Human readable:total only when a search or history

# Constraint: total.empty() or (type = 'searchset') or (type = 'history')
# ShEx:

 NOT { fhir:total {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  }) OR ({ fhir:type { fhir:v ['history'] }  })

) AND (

# Constraint UniqueKey:bdl-2
# Human readable:entry.search only when a search

# Constraint: (type = 'searchset') or entry.search.empty()
# ShEx:

({ fhir:type { fhir:v ['searchset'] }  }) OR  NOT { fhir:entry.search {fhir:v .} } 

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-3a
# Human readable:For collections of type document, message, searchset or collection, all entries must contain resources, and not have request or response elements
#
# Constraint: type in ('document' | 'message' | 'searchset' | 'collection') implies entry.all(resource.exists() and request.empty() and response.empty())
# ShEx:
#
#{ fhir:type { fhir:v ['document' 'message' 'searchset' 'collection'  Implies    all  (resource . AND  NOT { fhir:entry.request {fhir:v .} }  AND  NOT { .response {fhir:v .} } )] }  }
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: all
# Unmapped construct found: Equals
# # Constraint UniqueKey:bdl-3c
# Human readable:For collections of type transaction or batch, all entries must contain request elements, and resources if the method is POST, PUT or PATCH
#
# Constraint: type in ('transaction' | 'batch') implies entry.all(request.method.exists() and ((request.method in ('POST' | 'PATCH' | 'PUT')) = resource.exists()))
# ShEx:
#
#{ fhir:type { fhir:v ['transaction' 'batch'  Implies  {fhir:entry.  all  (request.method . AND request.method { fhir:v ['POST' 'PATCH' 'PUT'] }   Equals  resource .)}] }  }
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: all
# Unmapped construct found: Equals
# # Constraint UniqueKey:bdl-3b
# Human readable:For collections of type history, all entries must contain request or response elements, and resources if the method is POST, PUT or PATCH
#
# Constraint: type = 'history' implies entry.all(request.exists() and response.exists() and ((request.method in ('POST' | 'PATCH' | 'PUT')) = resource.exists()))
# ShEx:
#
#({ fhir:type { fhir:v ['history'] }  })  Implies  {fhir:entry.  all  (request . AND response . AND request.method { fhir:v ['POST' 'PATCH' 'PUT'] }   Equals  resource .)}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-8
# Human readable:fullUrl cannot be a version specific reference
#
# Constraint: fullUrl.exists() implies fullUrl.contains('/_history/').not()
# ShEx:
#
#{fhir:fullUrl .  Implies   NOT { fhir:fullUrl{ fhir:v ['/_history/'] } }}
{}

) AND (

# Constraint UniqueKey:bdl-5
# Human readable:must be a resource unless there's a request or response

# Constraint: resource.exists() or request.exists() or response.exists()
# ShEx:

{fhir:resource . OR {fhir:request . OR {fhir:response .}}}

)
 

# Search related information
<Bundle.entry.search> EXTENDS @<BackboneElement> CLOSED {   
    fhir:mode @<code> AND
    	{fhir:v @fhirvs:search-entry-mode}?;  # match | include - why this is in 
                                            # the result set 
    fhir:score @<decimal>?;                 # Search ranking (between 0 and 1)
}  

# Results of execution (transaction/batch/history)
<Bundle.entry.response> EXTENDS @<BackboneElement> CLOSED {   
    fhir:status @<string>;                  # Status response code (text 
                                            # optional) 
    fhir:location @<uri>?;                  # The location (if the operation 
                                            # returns a location) 
    fhir:etag @<string>?;                   # The Etag for the resource (if 
                                            # relevant) 
    fhir:lastModified @<instant>?;          # Server's date time modified
    fhir:outcome @<Resource>?;              # OperationOutcome with hints and 
                                            # warnings (for batch/transaction) 
}  

# Additional execution information (transaction/batch/history)
<Bundle.entry.request> EXTENDS @<BackboneElement> CLOSED {   
    fhir:method @<code> AND
    	{fhir:v @fhirvs:http-verb};  # GET | HEAD | POST | PUT | DELETE | 
                                            # PATCH 
    fhir:url @<uri>;                        # URL for HTTP equivalent of this 
                                            # entry 
    fhir:ifNoneMatch @<string>?;            # For managing cache validation
    fhir:ifModifiedSince @<instant>?;       # For managing cache currency
    fhir:ifMatch @<string>?;                # For managing update contention
    fhir:ifNoneExist @<string>?;            # For conditional creates
}  

# Links related to this Bundle
<Bundle.link> EXTENDS @<BackboneElement> CLOSED {   
    fhir:relation @<code> AND
    	{fhir:v @fhirvs:iana-link-relations};  # See 
                                            # http://www.iana.org/assignments/-
                                            # link-relations/link-relations.xh-
                                            # tml#link-relations-1 
    fhir:url @<uri>;                        # Reference details for the link
}  

# Entry in the bundle - will have a resource or information
<Bundle.entry> EXTENDS @<BackboneElement> CLOSED {   
    fhir:link @<OneOrMore_Bundle.link>?;    # Links related to this entry
    fhir:fullUrl @<uri>?;                   # URI for resource (e.g. the 
                                            # absolute URL server address, URI 
                                            # for UUID/OID, etc.) 
    fhir:resource @<Resource>?;             # A resource in the bundle
    fhir:search @<Bundle.entry.search>?;    # Search related information
    fhir:request @<Bundle.entry.request>?;  # Additional execution information 
                                            # (transaction/batch/history) 
    fhir:response @<Bundle.entry.response>?;  # Results of execution 
                                            # (transaction/batch/history) 
} AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: isDistinct
# Unmapped construct found: where
# Unmapped construct found: select
# Unmapped construct found: Concatenate
# Unmapped construct found: iif
# # Constraint UniqueKey:bdl-7
# Human readable:FullUrl must be unique in a bundle, or else entries with the same fullUrl must have different meta.versionId (except in history bundles)
#
# Constraint: (type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&iif(resource.meta.versionId.exists(), resource.meta.versionId, '')).isDistinct()
# ShEx:
#
#({ fhir:type { fhir:v ['history'] }  }) OR    isDistinct  ( fhir:entry. where  (fullUrl .). select  (fullUrl  Concatenate    iif  (resource.meta.versionId ., resource.meta.versionId, '')) )
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-9
# Human readable:A document must have an identifier with a system and a value
#
# Constraint: type = 'document' implies (identifier.system.exists() and identifier.value.exists())
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  })  Implies  ({fhir:identifier.system . AND {fhir:identifier.value .}})
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-17
# Human readable:Use and meaning of issues for documents has not been validated because the content will not be rendered in the document.
#
# Constraint: type = 'document' implies issues.empty()
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  })  Implies   NOT { fhir:issues {fhir:v .} } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-16
# Human readable:Issue.severity for all issues within the OperationOutcome must be either 'information' or 'warning'.
#
# Constraint: issues.exists() implies (issues.issue.severity = 'information' or issues.issue.severity = 'warning')
# ShEx:
#
#{fhir:issues .  Implies  (({fhir:issues.issue.severity { fhir:v ['information'] } }) OR ({fhir:issues.issue.severity { fhir:v ['warning'] } }))}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: where
# # Constraint UniqueKey:bdl-18
# Human readable:Self link is required for searchsets.
#
# Constraint: type = 'searchset' implies link.where(relation = 'self' and url.exists()).exists()
# ShEx:
#
#({ fhir:type { fhir:v ['searchset'] }  })  Implies  {fhir:link.  where  (relation { fhir:v ['self'] }  AND url .) .}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-13
# Human readable:A subscription-notification must have a SubscriptionStatus as the first resource
#
# Constraint: type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)
# ShEx:
#
#({ fhir:type { fhir:v ['subscription-notification'] }  })  Implies     first  ( fhir:entry ).resource { a [SubscriptionStatus] } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-12
# Human readable:A message must have a MessageHeader as the first resource
#
# Constraint: type = 'message' implies entry.first().resource.is(MessageHeader)
# ShEx:
#
#({ fhir:type { fhir:v ['message'] }  })  Implies     first  ( fhir:entry ).resource { a [MessageHeader] } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-15
# Human readable:Bundle resources where type is not transaction, transaction-response, batch, or batch-response or when the request is a POST SHALL have Bundle.entry.fullUrl populated
#
# Constraint: type='transaction' or type='transaction-response' or type='batch' or type='batch-response' or entry.all(fullUrl.exists() or request.method='POST')
# ShEx:
#
#({ fhir:type { fhir:v ['transaction'] }  }) OR ({ fhir:type { fhir:v ['transaction-response'] }  }) OR ({ fhir:type { fhir:v ['batch'] }  }) OR ({ fhir:type { fhir:v ['batch-response'] }  }) OR {fhir:entry.  all  (fullUrl . OR request.method { fhir:v ['POST'] } )}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-14
# Human readable:entry.request.method PATCH not allowed for history
#
# Constraint: type = 'history' implies entry.request.method != 'PATCH'
# ShEx:
#
#({ fhir:type { fhir:v ['history'] }  })  Implies  ({fhir:entry.request.method {fhir:v  [. -'PATCH']} })
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-11
# Human readable:A document must have a Composition as the first resource
#
# Constraint: type = 'document' implies entry.first().resource.is(Composition)
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  })  Implies     first  ( fhir:entry ).resource { a [Composition] } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-10
# Human readable:A document must have a date
#
# Constraint: type = 'document' implies (timestamp.hasValue())
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  })  Implies  ({fhir:timestamp .})
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-3d
# Human readable:For collections of type transaction-response or batch-response, all entries must contain response elements
#
# Constraint: type in ('transaction-response' | 'batch-response') implies entry.all(response.exists())
# ShEx:
#
#{ fhir:type { fhir:v ['transaction-response' 'batch-response'  Implies  {fhir:entry.  all  (response .)}] }  }
{}

) AND (

# Constraint UniqueKey:bdl-1
# Human readable:total only when a search or history

# Constraint: total.empty() or (type = 'searchset') or (type = 'history')
# ShEx:

 NOT { fhir:total {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  }) OR ({ fhir:type { fhir:v ['history'] }  })

) AND (

# Constraint UniqueKey:bdl-2
# Human readable:entry.search only when a search

# Constraint: (type = 'searchset') or entry.search.empty()
# ShEx:

({ fhir:type { fhir:v ['searchset'] }  }) OR  NOT { fhir:entry.search {fhir:v .} } 

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-3a
# Human readable:For collections of type document, message, searchset or collection, all entries must contain resources, and not have request or response elements
#
# Constraint: type in ('document' | 'message' | 'searchset' | 'collection') implies entry.all(resource.exists() and request.empty() and response.empty())
# ShEx:
#
#{ fhir:type { fhir:v ['document' 'message' 'searchset' 'collection'  Implies    all  (resource . AND  NOT { fhir:entry.request {fhir:v .} }  AND  NOT { .response {fhir:v .} } )] }  }
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: all
# Unmapped construct found: Equals
# # Constraint UniqueKey:bdl-3c
# Human readable:For collections of type transaction or batch, all entries must contain request elements, and resources if the method is POST, PUT or PATCH
#
# Constraint: type in ('transaction' | 'batch') implies entry.all(request.method.exists() and ((request.method in ('POST' | 'PATCH' | 'PUT')) = resource.exists()))
# ShEx:
#
#{ fhir:type { fhir:v ['transaction' 'batch'  Implies  {fhir:entry.  all  (request.method . AND request.method { fhir:v ['POST' 'PATCH' 'PUT'] }   Equals  resource .)}] }  }
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# Unmapped construct found: all
# Unmapped construct found: Equals
# # Constraint UniqueKey:bdl-3b
# Human readable:For collections of type history, all entries must contain request or response elements, and resources if the method is POST, PUT or PATCH
#
# Constraint: type = 'history' implies entry.all(request.exists() and response.exists() and ((request.method in ('POST' | 'PATCH' | 'PUT')) = resource.exists()))
# ShEx:
#
#({ fhir:type { fhir:v ['history'] }  })  Implies  {fhir:entry.  all  (request . AND response . AND request.method { fhir:v ['POST' 'PATCH' 'PUT'] }   Equals  resource .)}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:bdl-8
# Human readable:fullUrl cannot be a version specific reference
#
# Constraint: fullUrl.exists() implies fullUrl.contains('/_history/').not()
# ShEx:
#
#{fhir:fullUrl .  Implies   NOT { fhir:fullUrl{ fhir:v ['/_history/'] } }}
{}

) AND (

# Constraint UniqueKey:bdl-5
# Human readable:must be a resource unless there's a request or response

# Constraint: resource.exists() or request.exists() or response.exists()
# ShEx:

{fhir:resource . OR {fhir:request . OR {fhir:response .}}}

)
 

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_Bundle.link> CLOSED {
    rdf:first @<Bundle.link>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Bundle.link> 
}

<OneOrMore_Bundle.entry> CLOSED {
    rdf:first @<Bundle.entry>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Bundle.entry> 
}

#---------------------- Value Sets ------------------------





